AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to send HTML email alerts using SES and SNS, and store orders in S3.

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: lambda-s3-ses-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - ses:SendEmail
                  - ses:SendRawEmail
                  - sns:Publish
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: doap-shop
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs16.x
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic
          SENDER_EMAIL: info@doap.com
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          const ses = new AWS.SES();

          exports.handler = async (event) => {
              try {
                  if (!event.body) {
                      console.log("Request body is missing.");
                      throw new Error("Request body is missing.");
                  }

                  const requestBody = JSON.parse(event.body);
                  const { items, name, city, phone, email, address, total, paymentMethod } = requestBody;

                  if (!items || !name || !city || !phone || !email || !address || !total || !paymentMethod) {
                      console.log("Missing required fields:", { items, name, city, phone, email, address, total, paymentMethod });
                      throw new Error("Missing required fields: items, name, city, phone, email, address, total, or payment method.");
                  }

                  const timestamp = new Date().toISOString();

                  // Step 1: Get the current order count from ordercount.txt
                  const bucketName = "doap";
                  const orderCountKey = "ordercount.txt";
                  let orderCount = 0;

                  try {
                      const data = await s3.getObject({ Bucket: bucketName, Key: orderCountKey }).promise();
                      orderCount = parseInt(data.Body.toString('utf-8'), 10);
                      console.log("Fetched order count:", orderCount);
                  } catch (err) {
                      if (err.code === "NoSuchKey") {
                          console.log("ordercount.txt not found, initializing order count to 1.");
                          orderCount = 1;
                      } else {
                          console.error("Error reading from S3:", err);
                          throw new Error("Error reading from S3");
                      }
                  }

                  // Step 2: Generate the new order number
                  const orderNumber = orderCount;

                  // Step 3: Update ordercount.txt with the new order count
                  await s3.putObject({
                      Bucket: bucketName,
                      Key: orderCountKey,
                      Body: (orderNumber + 1).toString(),
                      ContentType: "text/plain"
                  }).promise();

                  console.log("Updated order count:", orderNumber + 1);

                  // Add the order number and payment method to the order details
                  const orderDetails = {
                      orderNumber,
                      city,
                      timestamp,
                      items,
                      name,
                      phone,
                      email,
                      address,
                      total,
                      paymentMethod,
                  };

                  // Step 4: Write the order details to a file named after the city (e.g., pleasanthill-orders.txt)
                  const orderFileName = `${city.toLowerCase()}-orders.txt`;
                  let existingData = "";
                  try {
                      const data = await s3.getObject({ Bucket: bucketName, Key: orderFileName }).promise();
                      existingData = data.Body.toString('utf-8');
                  } catch (err) {
                      if (err.code !== "NoSuchKey") {
                          console.error("Error reading order file:", err);
                          throw new Error("Error reading order file");
                      }
                  }

                  // Step 5: Append the new order details to the file
                  const updatedData = `${existingData}\nOrder Number: ${orderNumber}\nCustomer: ${name}\nPhone: ${phone}\nEmail: ${email}\nAddress: ${address}, ${city}\nPayment Method: ${paymentMethod}\nOrder Summary:\n${items.map(item => `${item.name} (x${item.quantity}) - $${(item.quantity * item.price).toFixed(2)}`).join('\n')}\nTotal: $${total}\nTimestamp: ${timestamp}\n`;

                  await s3.putObject({
                      Bucket: bucketName,
                      Key: orderFileName,
                      Body: updatedData,
                      ContentType: "text/plain"
                  }).promise();

                  console.log(`Order details saved to ${orderFileName}`);

                  // Send confirmation email to the customer
                  const sesCustomerParams = {
                      Source: process.env.SENDER_EMAIL,
                      Destination: { ToAddresses: [email] },
                      Message: {
                          Subject: { Data: `${city} Doap - Order Confirmation` },
                          Body: {
                              Html: {
                                  Data: `
                                      <html>
                                      <head>
                                          <style>
                                              /* Make sure the Marvel font is applied */
                                              @import url('https://fonts.googleapis.com/css2?family=Marvel&display=swap');
                                              
                                              body {
                                                  font-family: 'Marvel', sans-serif; /* Apply Marvel font to the email body */
                                                  font-size: 16px;
                                                  color: #333;
                                                  margin: 0;
                                                  padding: 0;
                                              }

                                              h2 {
                                                  font-family: 'Marvel', sans-serif; /* Ensure Marvel font for the title */
                                                  font-size: 2rem;
                                                  margin: 0;
                                              }

                                              /* Flexbox for right-aligning the logo and content */
                                              .email-container {
                                                  display: flex;
                                                  justify-content: space-between; /* Spread the content */
                                                  align-items: flex-start; /* Align items at the top */
                                                  margin-bottom: 20px; /* Space between logo and content */
                                              }

                                              .email-logo {
                                                  width: 75px;
                                                  height: auto;
                                                  margin-left: 20px; /* Ensure thereâ€™s space between logo and content */
                                              }

                                              .content {
                                                  max-width: 600px;
                                              }

                                              .phone-number {
                                                  font-size: 0.9rem;
                                                  margin-top: 5px;
                                                  color: #333;
                                                  text-decoration: none;
                                                  font-weight: normal;
                                              }
                                          </style>
                                      </head>
                                      <body>
                                          <div class="email-container">
                                              <!-- Right-align logo -->
                                              <img src="https://doap.com/doap-logo-ind.png" alt="Doap Logo" class="email-logo">
                                              <div class="content">
                                                  <h2>${city} Doap</h2> <!-- Use dynamic city name -->
                                                  <p>Your order is being processed! Expect delivery in about an hour. To check on your order, call <strong>${city} Doap</strong> at <strong>${phone}</strong>.</p>
                                                  <p><strong>Order Number:</strong> ${orderNumber}</p>
                                                  <p><strong>Name:</strong> ${name}</p>
                                                  <p><strong>Phone:</strong> ${phone}</p>
                                                  <p><strong>Delivery Address:</strong> ${address}, ${city}</p>
                                                  <p><strong>Order Summary:</strong></p>
                                                  <ul>
                                                      ${items.map(item => `<li>${item.name} (x${item.quantity}) - $${(item.quantity * item.price).toFixed(2)}</li>`).join('')}
                                                  </ul>
                                                  <p><strong>Total:</strong> ${total}</p>
                                                  ${
                                                      paymentMethod === "crypto"
                                                          ? `
                                                          <h3>Crypto Payment Instructions</h3>
                                                          <p>Please send your payment to one of the following addresses:</p>
                                                          <ul>
                                                              <li><strong>Bitcoin (BTC):</strong> bc1q28m9z95qzfjap7tamagnhlrk8nu332l7mlyjzr</li>
                                                              <li><strong>Ethereum (ETH):</strong> 0xf38ab68ae630bacd769cfc34fbcf3f7c0504f97a</li>
                                                              <li><strong>Doge (DOGE):</strong> DKx7uayMeVmd8Zuy3PgGSRB8XjUVt3ndeT</li>
                                                              <li><strong>Litecoin (LTC):</strong> ltc1q97cz898tgwqh23j44kf5nsaggg84j2vw666jqr</li>
                                                          </ul>
                                                          <p>Once your payment is sent, please send a screenshot of the transaction to hank@doap.com or call us at <strong>${phone}</strong> to verify your order.</p>
                                                          `
                                                          : ""
                                                  }
                                                  <p>Thank you for shopping with ${city} Doap!</p>
                                              </div>
                                          </div>
                                      </body>
                                      </html>
                                  `,
                              },
                          },
                      },
                  };
                  await ses.sendEmail(sesCustomerParams).promise();

                  // Send notification email to the backoffice team
                  const sesBackofficeParams = {
                      Source: process.env.SENDER_EMAIL,
                      Destination: { ToAddresses: ["info@doap.com"] },
                      Message: {
                          Subject: { Data: `${city} Doap - New Order Alert` },
                          Body: {
                              Html: {
                                  Data: `
                                      <html>
                                      <head>
                                        <style>
                                            @import url('https://fonts.googleapis.com/css2?family=Marvel&display=swap');

                                            body {
                                                font-family: Arial, sans-serif;
                                                line-height: 1.6;
                                                color: #333;
                                            }

                                            h2 {
                                                font-family: 'Marvel', sans-serif;
                                                font-size: 2rem;
                                                color: #333;
                                            }

                                            p {
                                                font-size: 1rem;
                                                margin: 5px 0;
                                            }

                                            ul {
                                                padding: 0;
                                                margin: 10px 0;
                                                list-style: none;
                                            }

                                            ul li {
                                                margin: 5px 0;
                                            }

                                            strong {
                                                font-weight: bold;
                                            }
                                            #messageItem .b-text-part.html img {
                                                max-width: 100%;
                                                height: auto;
                                                position: relative;
                                                float: right;
                                            }
                                        </style>
                                    </head>
                                      <body>
                                          <img src="https://doap.com/doap-logo-ind.png" alt="Doap Logo" style="width:75px;height:auto;">
                                          <h2> ${city} Doap</h2>
                                          <p>A new order has been received</p>
                                          <p><strong>Order Number:</strong> ${orderNumber}</p>
                                          <p><strong>Payment Method:</strong> ${paymentMethod}</p>
                                          <p><strong>Customer Name:</strong> ${name}</p>
                                          <p><strong>Phone:</strong> ${phone}</p>
                                          <p><strong>Customer Email:</strong> ${email}</p>
                                          <p><strong>Delivery Address:</strong> ${address}, ${city}</p>
                                          <p><strong>Total:</strong> ${total}</p>
                                          <h3>Order Details:</h3>
                                          <ul>${items.map(item => `<li>${item.name} (x${item.quantity}) - $${(item.quantity * item.price).toFixed(2)}</li>`).join('')}</ul>
                                          <p><strong>Timestamp:</strong> ${timestamp}</p>
                                      </body>
                                      </html>
                                  `,
                              },
                          },
                      },
                  };
                  await ses.sendEmail(sesBackofficeParams).promise();

                  return {
                      statusCode: 200,
                      headers: { "Access-Control-Allow-Origin": "*" },
                      body: JSON.stringify({ message: "Order processed successfully!", orderNumber }),
                  };
              } catch (error) {
                  console.error("Error in order processing:", error);
                  return {
                      statusCode: 500,
                      headers: { "Access-Control-Allow-Origin": "*" },
                      body: JSON.stringify({ error: error.message }),
                  };
              }
          };

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "DoapShopApi"

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "checkout"
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: 400
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: OPTIONS
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayMethod
      - ApiGatewayOptionsMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: doap-notifications

  NotificationTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref NotificationTopic
      Endpoint: dmenache@doap.com

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/checkout"

  LambdaFunctionName:
    Description: "The name of the created Lambda function"
    Value: !Ref LambdaFunction

